ctjsVersion: 5.2.1
backups: 3
language: typescript
notes: |-
  /*

  TODO

  - suffix of kit, app, lead !!
  - übersichtlicher machen
  - system prompt anpassen!!
  - besserer start in konversation !


  */
libs:
  place:
    gridX: 1024
    gridY: 1024
  pointer: {}
  keyboard: {}
  keyboard.polyfill: {}
  pointer.polyfill: {}
startroom: jknj4M3kMGqJpG
contentTypes: []
actions: []
scripts:
  - name: AI Answer generating
    code: >-
      let system_prompt = `You are an chatbot for conversations with people. You
      answer in short phrases. Say hello!`;


      let chat_history = []



      function writeBotAnswer(answer){
         // -- update Chat Verlauf: -- 
          chat_history[chat_history.length - 1].bot = answer;
          
          rooms.current.output_text.text = answer;

          console.log(chat_history);

          promptAnswerOptions(chat_history);
      }




      function buildBotPrompt(chatVerlauf, userInput) {
         var prompt = system_prompt + "Please continue the following conversation: \n\n";
         for (const entry of chatVerlauf) {
            prompt += "USER: " + entry.user + "\n";
            prompt += "BOT: " + entry.bot + "\n";
         }
         prompt += "USER: " + userInput + "\n";
         
         prompt += "Now write the Chatbot answer and continue the conversation:\n";
         return prompt;
      }


      function promptBot(chatVerlauf, userInput) {
          var nextPrompt = buildBotPrompt(chatVerlauf, userInput)
          var result = queryGemini(nextPrompt, localStorage.GEMINI_API_KEY).then(writeBotAnswer);
          var newEntry = {}
          newEntry.user = userInput
          newEntry.bot = result
          chatVerlauf.push(newEntry)
      }
  - name: queryGemini
    code: |+
      /**
       * Queries the Google Gemini API with a given prompt.
       *
       * @param {string} prompt The text prompt to send to the model.
       * @param {string} apiKey Your Google AI Studio API key.
       * @returns {Promise<string>} A promise that resolves to the model's text response.
       * @throws {Error} Throws an error if the API request fails.
       */
      async function queryGemini(prompt, apiKey) {
        // The API endpoint for the gemini-1.5-flash-latest model
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemma-3n-e4b-it:generateContent?key=${apiKey}`;

        // The request payload, containing the user's prompt
        const requestBody = {
          contents: [{
            parts: [{ text: prompt }]
          }]
        };

        try {
          // Make the API call using the fetch function
          const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
          });

          // Check if the request was successful
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`API Error: ${response.status} - ${errorData.error.message}`);
          }

          // Parse the JSON response
          const data = await response.json();

          // Extract and return the model's text response
          // Added safety checks for the response structure
          const responseText = data?.candidates?.[0]?.content?.parts?.[0]?.text;
          if (responseText) {
            return responseText;
          } else {
            throw new Error("Invalid response structure from API.");
          }

        } catch (error) {
          // Log the error and re-throw it for the calling code to handle
          console.error("Failed to query Gemini:", error);
          throw error;
        }
      }

      // --- Example Usage ---
      // This is how you would call the function.
      // Replace 'YOUR_API_KEY' with your actual key.

      /*
      async function main() {
        const myApiKey = 'YOUR_API_KEY';
        const myPrompt = 'Write a short poem about coding.';

        try {
          console.log("Sending prompt...");
          const result = await queryGemini(myPrompt, myApiKey);
          console.log("--- Gemini's Response ---");
          console.log(result);
        } catch (e) {
          console.log("An error occurred during the API call.");
        }
      }

      main();
      */


  - name: Option generating
    code: >-
      //* Use scripts to define frequent functions and import small libraries */


      let answer_possible = false;


      function writeAnswerOptions(answer){
         // -- update Chat Verlauf: -- 
         answer = answer.replace(/```/g, "").replace(/json/g, "");
         answer = JSON.parse(answer);
         rooms.current.answer1_text.text = answer.friendly_option;
         rooms.current.answer2_text.text = answer.rude_option;
         console.log(chat_history);

         console.log(answer);
         answer_possible = true;
      }


      let build_answer_prompt = 'Please create two short answers out of one
      sentence to the last part of the conversation and fill in structured json
      in this format Produce JSON matching exactly this specification:
      `{"friendly_option": string", "rude_option": string}`. IMPORTANT: NOT like
      this: ``` json {...}```'



      function buildAnswerOptionsPrompt(chatVerlauf) {
         var prompt = /*system_prompt + */"Please generate two possible very short answers how the user could react for the last AI part of the following conversation: \n\n";
         for (const entry of chatVerlauf) {
            prompt += "USER: " + entry.user + "\n";
            prompt += "BOT: " + entry.bot + "\n";
         }
         
         prompt += build_answer_prompt + '\n';
         return prompt;
      }



      function promptAnswerOptions(chatVerlauf) {
          var nextPrompt = buildAnswerOptionsPrompt(chatVerlauf)
          var result = queryGemini(nextPrompt, localStorage.GEMINI_API_KEY).then(writeAnswerOptions);
      }
  - name: Cat generation
    code: "let ai_cat = {\n    name:\"\",\n    rank:\"\",\n    age:\"\",\n    gender:\"\",\n    furcolor:\"\",\n    eyecolor:\"\",\n    personality:\"\",\n    backgroundhistory:\"\",\n    //family\n    clan:\"\",\n    relationshipToUser:\"\",\n    skills:\"\",\n    weaknesses:\"\",\n}\n\nfunction getRandomInt(max) {\n      return Math.floor(Math.random() * max);\n    }\n\n\nfunction generateNewCat(cat_object){\n    let prefix = warriorCatPrefixes[getRandomInt(warriorCatPrefixes.length)];\n    let suffix = warriorCatSuffixes[getRandomInt(warriorCatSuffixes.length)];\n    cat_object.name = prefix + suffix;\n    cat_object.rank = warriorCatRanks[getRandomInt(warriorCatRanks.length)];\n    cat_object.age = getRandomCatAge(cat_object.rank) + \" moons\";\n    cat_object.clan = warriorCatClans[getRandomInt(warriorCatClans.length)];\n    cat_object.relationshipToUser = \"neutral\";\n    console.log(cat_object)\n    let prompt = \"Please fill in empty strings the following javascript object for a warrior cats cat based on the already given information. Don't change the existing information. Return a structured JSON matching exactly the given specification:. \\n \" + JSON.stringify(ai_cat, null,\_4);;\n    console.log(prompt);\n    var result = queryGemini(prompt, localStorage.GEMINI_API_KEY).then(writeCatToConsole);\n}\n\nfunction getRandomCatAge(rank) {\n  switch (rank) {\n    case \"kit\":\n      return getRandomInt(0, 5); // 0–5 moons\n    case \"apprentice\":\n    case \"medicine apprentice\":\n      return getRandomInt(6, 12); // 6–12 moons\n    case \"warrior\":\n    case \"medicine cat\":\n      return getRandomInt(13, 60); // 13–60 moons\n    case \"queen\":\n      return getRandomInt(20, 70); // 20–70 moons, assuming mature adult\n    case \"deputy\":\n      return getRandomInt(30, 80); // 30–80 moons, experienced\n    case \"leader\":\n      return getRandomInt(40, 100); // 40–100 moons, seasoned\n    case \"elder\":\n      return getRandomInt(80, 120); // 80–120 moons, retired\n    default:\n      return getRandomInt(12, 60); // fallback for unknown rank\n  }\n}\n\nfunction writeCatToConsole(cat){\n    cat = cat.replace(/```/g, \"\").replace(/json/g, \"\");\n    cat = JSON.parse(cat);\n    console.log(cat)\n    let cat_prompt = generateCatAIPrompt(cat);\n    console.log(cat_prompt);\n\n    //start conversation\n    promptBot(chat_history, cat_prompt);\n}\n\n\nfunction generateCatAIPrompt(cat_object){\n  let prompt = `You are ${cat_object.name}, a ${cat_object.rank} in ${cat_object.clan}. You are ${cat_object.age} old, with ${cat_object.furcolor} fur and ${cat_object.eyecolor} eyes. ${cat_object.personality} ${cat_object.backgroundhistory} You'r skills: ${cat_object.skills}. You'r weaknesses: ${cat_object.weaknesses} Speak as ${cat_object.name} would—use her voice, thoughts, and feelings. Respond to questions or situations as if you were her.`;\n  return prompt;\n}"
  - name: Cat Info Lists
    code: >
      const warriorCatClans = ["Thunderclan", "Windclan", "Riverclan",
      "Shadowclan"];


      const warriorCatRanks = ["kit", "apprentice", "medicine apprentice",
      "warrior", "medicine cat", "queen", "deputy", "leader", "elder"]


      const warriorCatPrefixes = [
        "Acorn", "Adder", "Alder", "Amber", "Ant", "Apple", "Arc", "Arch", "Ash", "Aspen",
        "Badger", "Bark", "Bay", "Bee", "Beech", "Beetle", "Bella", "Berry", "Big", "Billy",
        "Birch", "Bird", "Black", "Blaze", "Blizzard", "Bloom", "Blossom", "Blue", "Bluebell",
        "Boulder", "Bounce", "Bracken", "Bramble", "Branch", "Brave", "Breeze", "Briar",
        "Bright", "Brindle", "Bristle", "Broken", "Brook", "Brown", "Brush", "Bubbling",
        "Bug", "Bumble", "Buzzard", "Cedar", "Cherry", "Chestnut", "Chive", "Cinder",
        "Cinnamon", "Claw", "Clear", "Cloud", "Clover", "Cone", "Copper", "Creek", "Cricket",
        "Crooked", "Crouch", "Crow", "Curl", "Curly", "Cypress", "Daisy", "Dandelion",
        "Dangling", "Dapple", "Dappled", "Dark", "Dawn", "Dead", "Deer", "Dew", "Doe", "Dove",
        "Down", "Drift", "Duck", "Dusk", "Dust", "Eagle", "Ebony", "Echo", "Eel", "Egg",
        "Elder", "Ember", "Fallen", "Fallow", "Fawn", "Feather", "Fennel", "Fern", "Ferret",
        "Fidget", "Fin", "Finch", "Fir", "Fire", "Flail", "Flame", "Flash", "Flax", "Fleet",
        "Flicker", "Flint", "Flip", "Float", "Flower", "Fluff", "Flutter", "Fly", "Fog",
        "Fox", "Freckle", "Fringe", "Frog", "Frond", "Frost", "Furze", "Fuzzy", "Gale",
        "Golden", "Goose", "Gorse", "Grass", "Gravel", "Gray", "Green", "Gull", "Gust",
        "Hail", "Half", "Hare", "Harry", "Harvey", "Hatch", "Haven", "Hawk", "Hay", "Hazel",
        "Heather", "Heavy", "Heron", "Hickory", "Hill", "Hollow", "Holly", "Honey", "Hoot",
        "Hop", "Hope", "Hound", "Hunt", "Ice", "Ivy", "Jagged", "Jay", "Jump", "Juniper",
        "Kestrel", "Kink", "Kite", "Lake", "Larch", "Lark", "Lavender", "Leaf", "Leopard",
        "Lichen", "Light", "Lightning", "Lily", "Lion", "Little", "Lizard", "Log", "Long",
        "Lost", "Loud", "Lynx", "Maggot", "Mallow", "Maple", "Marigold", "Marsh", "Meadow",
        "Midge", "Milk", "Minnow", "Mint", "Mist", "Mistle", "Misty", "Mole", "Monkey",
        "Moon", "Morning", "Moss", "Mossy", "Moth", "Mottle", "Mouse", "Mud", "Mumble",
        "Myrtle", "Nectar", "Needle", "Nettle", "Newt", "Night", "Nut", "Oak", "Oat", "Odd",
        "Olive", "One", "Otter", "Owl", "Pale", "Parsley", "Patch", "Peak", "Pear", "Pebble",
        "Perch", "Petal", "Pigeon", "Pike", "Pine", "Pink", "Plum", "Pod", "Pool", "Poppy",
        "Pounce", "Prickle", "Primrose", "Puddle", "Quail", "Quick", "Quiet", "Rabbit",
        "Ragged", "Rain", "Rapid", "Rat", "Raven", "Red", "Reed", "Ridge", "Riley", "Ripple",
        "River", "Robin", "Rock", "Rook", "Root", "Rose", "Rough", "Rowan", "Rubble",
        "Running", "Rush", "Russet", "Rustle", "Rye", "Sage", "Sand", "Sandy", "Scorch",
        "Sedge", "Seed", "Shade", "Shadow", "Sharp", "Shattered", "Sheep", "Shell",
        "Shimmer", "Shine", "Shining", "Shivering", "Short", "Shred", "Shrew", "Shy",
        "Silky", "Silver", "Sky", "Slate", "Sleek", "Slight", "Sloe", "Small", "Smoke",
        "Snail", "Snake", "Snap", "Sneeze", "Snip", "Snook", "Snow", "Soft", "Song", "Soot",
        "Sorrel", "Spark", "Sparrow", "Speckle", "Spider", "Spike", "Spire", "Splash",
        "Spot", "Spotted", "Spruce", "Squirrel", "Stag", "Star", "Starling", "Stem", "Stoat",
        "Stone", "Stork", "Storm", "Stream", "Stretch", "Strike", "Stripe", "Stumpy", "Sun",
        "Sunny", "Swallow", "Swamp", "Swan", "Sweet", "Swift", "Tall", "Talon", "Tangle",
        "Tansy", "Tawny", "Thistle", "Thorn", "Thrift", "Thrush", "Thunder", "Tiger",
        "Timber", "Tiny", "Toad", "Torn", "Trout", "Tulip", "Tumble", "Turtle", "Twig",
        "Vine", "Violet", "Vixen", "Vole", "Waffle", "Wasp", "Wave", "Weasel", "Web", "Weed",
        "Wet", "Whisker", "Whisper", "Whistle", "White", "Whorl", "Wild", "Willow", "Wind",
        "Wish", "Wolf", "Wood", "Woolly", "Wren", "Yarrow", "Yellow", "Yew"
      ];


      const warriorCatSuffixes = [
        "bark", "beam", "bee", "belly", "berry", "bird", "blaze", "bloom", "blossom",
        "branch", "breeze", "briar", "bright", "brook", "brush", "burr", "burrow", "bush",
        "call", "claw", "cloud", "crawl", "creek", "cry", "curl", "dapple", "dawn", "drift",
        "dusk", "dust", "ear", "eater", "eye", "eyes", "face", "fall", "fang", "feather",
        "fern", "fire", "fish", "flake", "flame", "flight", "flower", "foot", "frond",
        "frost", "fur", "glow", "grass", "gorse", "hawk", "haze", "heart", "ice", "jaw",
        "kit", "leaf", "leap", "leg", "light", "mask", "minnow", "mist", "moon", "mouse",
        "muzzle", "needle", "nose", "pad", "paw", "paws", "peak", "pelt", "petal", "pool",
        "poppy", "pounce", "puddle", "ripple", "rose", "runner", "scar", "scratch", "seed",
        "shade", "shadow", "shell", "shimmer", "shine", "sight", "skip", "sky", "slime",
        "slip", "sludge", "smoke", "snout", "snow", "song", "speck", "speckle", "spirit",
        "splash", "spot", "spots", "spring", "stalk", "star", "stem", "step", "sting",
        "stone", "storm", "stream", "strike", "stripe", "swoop", "tail", "talon", "teeth",
        "thistle", "thorn", "throat", "toe", "tooth", "tuft", "watcher", "water", "weed",
        "whisker", "whisper", "whistle", "willow", "wind", "wing", "wish"
      ];
assets:
  - type: folder
    uid: QBfdbBfbjfN4mj
    colorClass: act
    icon: texture
    name: Textures
    lastmod: 1754832586836
    entries:
      - lastmod: 1754832804036
        type: texture
        name: Nightbreeze
        untill: 0
        grid:
          - 1
          - 1
        axis:
          - 0
          - 0
        marginx: 0
        marginy: 0
        imgWidth: 32
        imgHeight: 32
        width: 32
        height: 32
        offx: 0
        offy: 0
        origname: i96LrbR1NcB2prc.png
        shape: rect
        left: -5
        right: 27
        top: -4
        bottom: 32
        uid: 96LrbR1NcB2prc
        padding: 1
        isBlank: false
        source: 'C:\Users\Jasmin\ct.js\Assets\WarriorCatConversation\Nightbreeze.png'
      - lastmod: 1754834248395
        type: texture
        name: TextBox
        untill: 0
        grid:
          - 1
          - 1
        axis:
          - 0
          - 0
        marginx: 0
        marginy: 0
        imgWidth: 128
        imgHeight: 128
        width: 128
        height: 128
        offx: 0
        offy: 0
        origname: irG8CFrTCD5z35M.png
        shape: rect
        left: -8
        right: 83
        top: -42
        bottom: 75
        uid: rG8CFrTCD5z35M
        padding: 1
        isBlank: false
        source: 'C:\Users\Jasmin\ct.js\Assets\WarriorCatConversation\TextBox.png'
  - type: folder
    uid: 7b4FjQ7drnk22w
    colorClass: act
    icon: bitmap-font
    name: Styles
    lastmod: 1754832629565
    entries:
      - type: style
        name: MainStyle
        uid: RmH352m331CKcT
        typeface: -1
        font:
          family: sans-serif
          halign: left
          italic: false
          size: 8
          weight: '400'
          wrap: true
          wrapPosition: 169
          lineHeight: 9.01
        fill:
          type: '0'
          color: '#000000'
          color1: '#cccccc'
          color2: '#ffffff'
          gradtype: '2'
        lastmod: 1754845806656
  - type: room
    oncreate: ''
    onstep: ''
    ondraw: ''
    onleave: ''
    gridX: 64
    gridY: 64
    diagonalGrid: false
    disableGrid: false
    simulate: true
    width: 320
    height: 180
    restrictCamera: false
    restrictMaxX: 1280
    restrictMinX: 0
    restrictMaxY: 720
    restrictMinY: 0
    isUi: false
    name: ConversationRoom
    backgroundColor: '#1F2B22'
    follow: -1
    backgrounds: []
    copies:
      - x: 184
        'y': 32
        opacity: 1
        tint: 16777215
        scale:
          x: 5
          'y': 5
        rotation: 0
        uid: fB6cfg1j9crhWT
        exts: {}
        customProperties: {}
        bindings: {}
      - x: -8
        'y': -16
        opacity: 1
        tint: 16777215
        scale:
          x: 2.5
          'y': 2.5
        rotation: 0
        uid: LbPgLfHTM51G2r
        exts: {}
        customProperties: {}
        bindings: {}
      - x: -8
        'y': -32
        opacity: 1
        tint: 16777215
        scale:
          x: 2.5
          'y': 1
        rotation: 0
        uid: fM4QTHhqh2DLMg
        exts: {}
        customProperties: {}
        bindings: {}
      - x: -8
        'y': 8
        opacity: 1
        tint: 16777215
        scale:
          x: 2.5
          'y': 1
        rotation: 0
        uid: 564QfWNnK23Qg7
        exts: {}
        customProperties: {}
        bindings: {}
      - x: 16
        'y': 14
        opacity: 1
        tint: 16777215
        scale:
          x: 1
          'y': 1
        rotation: 0
        uid: d62dbn7mDC4nNh
        exts: {}
        customProperties: {}
        bindings: {}
      - x: 16
        'y': 55
        opacity: 1
        tint: 16777215
        scale:
          x: 1
          'y': 1
        rotation: 0
        uid: CWLpKWNc79NnKW
        exts: {}
        customProperties: {}
        bindings: {}
      - x: 16
        'y': 96
        opacity: 1
        tint: 16777215
        scale:
          x: 1
          'y': 1
        rotation: 0
        uid: CrPqG9RDfGKdLN
        exts: {}
        customProperties: {}
        bindings: {}
    tiles: []
    extends: {}
    lastmod: 1754906769599
    events:
      - eventKey: OnRoomStart
        code: |-

          generateNewCat(ai_cat);

          //promptBot(chat_history, system_prompt);
        arguments: {}
        lib: core
    behaviors: []
    extendTypes: ''
    uid: rf51RTcQ1R6L8B
  - type: folder
    uid: GD3whkTJmr6FpM
    colorClass: act
    icon: template
    name: Templates
    lastmod: 1754833035916
    entries:
      - type: template
        baseClass: AnimatedSprite
        name: Cat
        depth: 0
        texture: 96LrbR1NcB2prc
        playAnimationOnStart: false
        loopAnimation: true
        animationFPS: 30
        visible: true
        events:
          - eventKey: OnCreate
            code: ''
            arguments: {}
            lib: core
        extends:
          cgroup: ''
        lastmod: 1754846658916
        uid: fB6cfg1j9crhWT
        behaviors: []
        extendTypes: ''
      - type: template
        baseClass: Text
        name: Output_Text
        depth: 0
        texture: -1
        playAnimationOnStart: false
        loopAnimation: true
        animationFPS: 30
        visible: true
        events:
          - eventKey: OnCreate
            code: rooms.current.output_text = this;
            arguments: {}
            lib: core
          - eventKey: OnStep
            code: ''
            arguments: {}
            lib: core
        extends:
          cgroup: ''
        lastmod: 1754846306588
        uid: CrPqG9RDfGKdLN
        behaviors: []
        extendTypes: ''
        defaultText: ''
        textStyle: RmH352m331CKcT
      - type: template
        baseClass: AnimatedSprite
        name: Output_TextBox
        depth: 0
        texture: rG8CFrTCD5z35M
        playAnimationOnStart: false
        loopAnimation: true
        animationFPS: 30
        visible: true
        events:
          - eventKey: OnCreate
            code: rooms.current.output_textbox = this;
            arguments: {}
            lib: core
        extends:
          cgroup: ''
        lastmod: 1754834923658
        uid: LbPgLfHTM51G2r
        behaviors: []
        extendTypes: ''
      - type: template
        baseClass: AnimatedSprite
        name: Answer1_TextBox
        depth: 0
        texture: rG8CFrTCD5z35M
        playAnimationOnStart: false
        loopAnimation: true
        animationFPS: 30
        visible: true
        events:
          - eventKey: OnCreate
            code: rooms.current.answer1_textbox = this;
            arguments: {}
            lib: core
          - eventKey: OnPointerClick
            code: |-
              if(answer_possible){
                  promptBot(chat_history, rooms.current.answer1_text.text);
                  rooms.current.answer1_text.text = "";
                  rooms.current.answer2_text.text = "";
                  answer_possible = false;
              }
            arguments: {}
            lib: core
          - eventKey: OnStep
            code: this.visible = answer_possible;
            arguments: {}
            lib: core
        extends:
          cgroup: ''
        lastmod: 1754845889420
        uid: fM4QTHhqh2DLMg
        behaviors: []
        extendTypes: ''
      - type: template
        baseClass: AnimatedSprite
        name: Answer2_TextBox
        depth: 0
        texture: rG8CFrTCD5z35M
        playAnimationOnStart: false
        loopAnimation: true
        animationFPS: 30
        visible: true
        events:
          - eventKey: OnCreate
            code: rooms.current.answer2_textbox = this;
            arguments: {}
            lib: core
          - eventKey: OnPointerClick
            code: |-
              if(answer_possible){
                  promptBot(chat_history, rooms.current.answer2_text.text);
                  rooms.current.answer1_text.text = "";
                  rooms.current.answer2_text.text = "";
                  answer_possible = false;
              }
            arguments: {}
            lib: core
          - eventKey: OnStep
            code: this.visible = answer_possible;
            arguments: {}
            lib: core
        extends:
          cgroup: ''
        lastmod: 1754845896405
        uid: 564QfWNnK23Qg7
        behaviors: []
        extendTypes: ''
      - type: template
        baseClass: Text
        name: Output_Answer1
        depth: 0
        texture: -1
        playAnimationOnStart: false
        loopAnimation: true
        animationFPS: 30
        visible: true
        events:
          - eventKey: OnCreate
            code: rooms.current.answer1_text = this;
            arguments: {}
            lib: core
        extends:
          cgroup: ''
        lastmod: 1754845921379
        uid: d62dbn7mDC4nNh
        behaviors: []
        extendTypes: ''
        defaultText: ''
        textStyle: RmH352m331CKcT
      - type: template
        baseClass: Text
        name: Output_Answer2
        depth: 0
        texture: -1
        playAnimationOnStart: false
        loopAnimation: true
        animationFPS: 30
        visible: true
        events:
          - eventKey: OnStep
            lib: core
            code: rooms.current.answer2_text = this;
            arguments: {}
        extends:
          cgroup: ''
        lastmod: 1754845920052
        uid: CWLpKWNc79NnKW
        behaviors: []
        extendTypes: ''
        defaultText: ''
        textStyle: RmH352m331CKcT
  - type: template
    baseClass: TextBox
    name: API_key_input
    depth: 0
    texture: rG8CFrTCD5z35M
    playAnimationOnStart: false
    loopAnimation: true
    animationFPS: 30
    visible: true
    events:
      - eventKey: OnCreate
        code: |-
          if ('GEMINI_API_KEY' in localStorage) { // was anything saved before?
              this.text = localStorage.GEMINI_API_KEY;
          }
        arguments: {}
        lib: core
      - eventKey: OnTextChange
        code: |-
          localStorage.GEMINI_API_KEY = this.text;

          rooms.switch('ConversationRoom');
        arguments: {}
        lib: core
    extends:
      cgroup: ''
    lastmod: 1754835439835
    uid: Hc22Krk1j6z1Nm
    behaviors: []
    extendTypes: ''
    defaultText: ''
    textStyle: RmH352m331CKcT
    nineSliceSettings:
      top: 16
      left: 16
      bottom: 16
      right: 16
      autoUpdate: false
    hoverTexture: -1
    pressedTexture: -1
    disabledTexture: -1
    fieldType: text
    maxTextLength: 0
  - type: room
    oncreate: ''
    onstep: ''
    ondraw: ''
    onleave: ''
    gridX: 64
    gridY: 64
    diagonalGrid: false
    disableGrid: false
    simulate: true
    width: 320
    height: 180
    restrictCamera: false
    restrictMaxX: 1280
    restrictMinX: 0
    restrictMaxY: 720
    restrictMinY: 0
    isUi: false
    name: StartingRoom
    backgroundColor: '#000000'
    follow: -1
    backgrounds: []
    copies:
      - x: 32
        'y': -80
        opacity: 1
        tint: 16777215
        scale:
          x: 3
          'y': 3
        rotation: 0
        uid: Hc22Krk1j6z1Nm
        exts: {}
        customProperties: {}
        bindings: {}
    tiles: []
    extends: {}
    lastmod: 1754848815876
    events: []
    behaviors: []
    extendTypes: ''
    uid: jknj4M3kMGqJpG
globalVars: []
settings:
  authoring:
    author: ''
    site: ''
    title: ''
    version:
      - 0
      - 0
      - 0
    versionPostfix: ''
    appId: ''
  rendering:
    usePixiLegacy: true
    transparent: false
    maxFPS: 60
    pixelatedrender: true
    highDensity: true
    desktopMode: maximized
    hideCursor: false
    mobileScreenOrientation: unspecified
    viewMode: scaleFit
  export:
    showErrors: true
    errorsLink: ''
    autocloseDesktop: true
    windows: true
    linux: true
    mac: true
    functionWrap: false
    codeModifier: none
    bundleAssetTree: false
    bundleAssetTypes:
      texture: true
      template: true
      room: true
      behavior: false
      typeface: false
      sound: false
      style: false
      tandem: false
      script: false
      enum: false
  branding:
    accent: '#446adb'
    invertPreloaderScheme: true
    icon: -1
    splashScreen: -1
    forceSmoothIcons: false
    forceSmoothSplashScreen: false
    hideLoadingLogo: false
    alternativeLogo: false
    customLoadingText: ''
  fps: 30
palette: []
